<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/README.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/README.md" />
              <option name="updatedContent" value="# Maven SOAP Exam Project&#10;&#10;## Requirements&#10;- **Java Version**: JDK 17&#10;- **Tomcat Version**: Tomcat 10&#10;- **Maven Version**: 3.9.9&#10;- **Docker**: Docker Compose for database setup&#10;&#10;## Architecture&#10;&#10;### Modules&#10;1. **Metier Module**:&#10;   - Contains the business logic and data access layers.&#10;   - **Files**:&#10;     - `dao` and `entity` for data access.&#10;     - `dto`, `mapper`, and `service` for business logic.&#10;   - Located in `metier/src/main/java/com/exam`.&#10;&#10;2. **Webservices Module**:&#10;   - Contains the SOAP web services implementation.&#10;   - **Files**:&#10;     - `SectorWebService` and `SectorWebServiceImpl` for sector-related operations.&#10;     - `ClasseWebService` and `ClasseWebServiceImpl` for class-related operations.&#10;   - Located in `webservices/src/main/java/com/groupeisi/webservice`.&#10;&#10;### Layers&#10;1. **Presentation Layer**:&#10;   - Handles user interaction and API exposure.&#10;   - Includes SOAP web services in the `webservices` module.&#10;&#10;2. **Business Logic Layer**:&#10;   - Manages the core logic and data processing.&#10;   - Implemented in the `metier` module.&#10;&#10;3. **Data Access Layer**:&#10;   - Handles database interactions.&#10;   - Includes DAO and entity classes in the `metier` module.&#10;&#10;## How to Start the Project&#10;&#10;### Steps&#10;1. Clone the repository:&#10;   ```bash&#10;   git clone &lt;repository-url&gt;&#10;   ```&#10;2. Navigate to the project directory:&#10;   ```bash&#10;   cd maven-soap-exam&#10;   ```&#10;3. Build the project:&#10;   ```bash&#10;   mvn clean install&#10;   ```&#10;4. Deploy the `webservices` module to Tomcat 10.&#10;5. Access the WSDL link for the SOAP web service and test using Postman.&#10;&#10;### Database Setup with Docker&#10;1. Navigate to the `docker` directory:&#10;   ```bash&#10;   cd docker&#10;   ```&#10;2. Start the database and phpMyAdmin services:&#10;   ```bash&#10;   docker-compose up -d&#10;   ```&#10;3. Access phpMyAdmin at `http://localhost:81`.&#10;&#10;## Images&#10;### SOAP Web Service Testing&#10;#### All Sectors&#10;![All Sectors](images/all%20sectors.png)&#10;#### Get Sector&#10;![Get Sector](images/get%20sector%20.png)&#10;#### Save Sector&#10;![Save Sector](images/save%20sector.png)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/metier/src/main/java/com/exam/metier/dto/ResponseDto.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/metier/src/main/java/com/exam/metier/dto/ResponseDto.java" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>