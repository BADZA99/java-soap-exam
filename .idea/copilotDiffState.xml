<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/README.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/README.md" />
              <option name="originalContent" value="# Projet Maven SOAP Exam&#10;&#10;## Prérequis&#10;- **Version Java** : JDK 17&#10;- **Version Tomcat** : Tomcat 10&#10;- **Version Maven** : 3.9.9&#10;- **Docker** : Docker Compose pour la configuration de la base de données&#10;&#10;## Architecture&#10;&#10;### Modules&#10;1. **Module Metier** :&#10;   - Contient la logique métier et les couches d'accès aux données.&#10;   - **Fichiers** :&#10;     - `dao` et `entity` pour la couche d'accès aux données.&#10;     - `dto`, `mapper`, et `service` pour la couche métier.&#10;   - Localisé dans `metier/src/main/java/com/exam`.&#10;&#10;2. **Module Webservices** :&#10;   - Contient l'implémentation des services web SOAP.&#10;   - **Fichiers** :&#10;     - `SectorWebService` et `SectorWebServiceImpl` pour les opérations liées aux secteurs.&#10;     - `ClasseWebService` et `ClasseWebServiceImpl` pour les opérations liées aux classes.&#10;   - Localisé dans `webservices/src/main/java/com/groupeisi/webservice`.&#10;&#10;### Couches&#10;1. **Couche Présentation** :&#10;   - Gère l'interaction utilisateur et expose les API.&#10;   - Inclut les services web SOAP dans le module `webservices`.&#10;&#10;2. **Couche Métier** :&#10;   - Gère la logique principale et le traitement des données.&#10;   - Implémentée dans le module `metier`.&#10;&#10;3. **Couche Accès aux Données** :&#10;   - Gère les interactions avec la base de données.&#10;   - Inclut les classes DAO et entity dans le module `metier`.&#10;&#10;## Comment démarrer le projet&#10;&#10;### Étapes&#10;1. Cloner le dépôt :&#10;   ```bash&#10;   git clone https://github.com/BADZA99/java-soap-exam.git&#10;   ```&#10;2. Naviguer dans le répertoire du projet :&#10;   ```bash&#10;   cd maven-soap-exam&#10;   ```&#10;3. Construire le projet :&#10;   ```bash&#10;   mvn clean install&#10;   ```&#10;4. Déployer le module `webservices` sur Tomcat 10.&#10;5. Accéder au lien WSDL pour le service web SOAP et tester avec Postman.&#10;&#10;### Configuration de la base de données avec Docker&#10;1. Naviguer dans le répertoire `docker` :&#10;   ```bash&#10;   cd docker&#10;   ```&#10;2. Démarrer les services de base de données et phpMyAdmin :&#10;   ```bash&#10;   docker-compose up -d&#10;   ```&#10;3. Accéder à phpMyAdmin via `http://localhost:81`.&#10;&#10;## Diagramme de Classe&#10;Le diagramme de classe ci-dessous représente la structure du projet :&#10;&#10;![Diagramme de Classe](DiagrammeDeClasse.png)&#10;&#10;## Images&#10;### Tests des services web SOAP&#10;#### Tous les secteurs&#10;![Tous les secteurs](images/all%20sectors.png)&#10;#### Obtenir un secteur&#10;![Obtenir un secteur](images/get%20sector%20.png)&#10;#### Sauvegarder un secteur&#10;![Sauvegarder un secteur](images/save%20sector.png)&#10;" />
              <option name="updatedContent" value="# Projet Maven SOAP Exam&#10;&#10;## Prérequis&#10;- **Version Java** : JDK 17&#10;- **Version Tomcat** : Tomcat 10&#10;- **Version Maven** : 3.9.9&#10;- **Docker** : Docker Compose pour la configuration de la base de données&#10;&#10;## Architecture&#10;&#10;### Modules&#10;1. **Module Metier** :&#10;   - Contient la logique métier et les couches d'accès aux données.&#10;   - **Fichiers** :&#10;     - `dao` et `entity` pour la couche d'accès aux données.&#10;     - `dto`, `mapper`, et `service` pour la couche métier.&#10;   - Localisé dans `metier/src/main/java/com/exam`.&#10;&#10;2. **Module Webservices** :&#10;   - Contient l'implémentation des services web SOAP.&#10;   - **Fichiers** :&#10;     - `SectorWebService` et `SectorWebServiceImpl` pour les opérations liées aux secteurs.&#10;     - `ClasseWebService` et `ClasseWebServiceImpl` pour les opérations liées aux classes.&#10;   - Localisé dans `webservices/src/main/java/com/groupeisi/webservice`.&#10;&#10;### Couches&#10;1. **Couche Présentation** :&#10;   - Gère l'interaction utilisateur et expose les API.&#10;   - Inclut les services web SOAP dans le module `webservices`.&#10;&#10;2. **Couche Métier** :&#10;   - Gère la logique principale et le traitement des données.&#10;   - Implémentée dans le module `metier`.&#10;&#10;3. **Couche Accès aux Données** :&#10;   - Gère les interactions avec la base de données.&#10;   - Inclut les classes DAO et entity dans le module `metier`.&#10;&#10;## Comment démarrer le projet&#10;&#10;### Étapes&#10;1. Cloner le dépôt :&#10;   ```bash&#10;   git clone https://github.com/BADZA99/java-soap-exam.git&#10;   ```&#10;2. Naviguer dans le répertoire du projet :&#10;   ```bash&#10;   cd maven-soap-exam&#10;   ```&#10;3. Construire le projet :&#10;   ```bash&#10;   mvn clean install&#10;   ```&#10;4. Déployer le module `webservices` sur Tomcat 10.&#10;5. Accéder au lien WSDL pour le service web SOAP et tester avec Postman.&#10;&#10;### Configuration de la base de données avec Docker&#10;1. Naviguer dans le répertoire `docker` :&#10;   ```bash&#10;   cd docker&#10;   ```&#10;2. Démarrer les services de base de données et phpMyAdmin :&#10;   ```bash&#10;   docker-compose up -d&#10;   ```&#10;3. Accéder à phpMyAdmin via `http://localhost:81`.&#10;&#10;## Diagramme de Classe&#10;Le diagramme de classe ci-dessous représente la structure du projet :&#10;&#10;![Diagramme de Classe](DiagrammeDeClasse.png)&#10;&#10;## Images&#10;### Tests des services web SOAP&#10;#### Tous les secteurs&#10;![Tous les secteurs](images/all%20sectors.png)&#10;#### Obtenir un secteur&#10;![Obtenir un secteur](images/get%20sector%20.png)&#10;#### Sauvegarder un secteur&#10;![Sauvegarder un secteur](images/save%20sector.png)&#10;#### Tous les classes&#10;![Tous les classes](images/all%20classes.png)&#10;&#10;## Problèmes rencontrés&#10;### Erreur lors de la sauvegarde d'une classe&#10;- **Message d'erreur** :&#10;  ```&#10;  02-Aug-2025 19:19:37.081 SEVERE [RMI TCP Connection(2)-127.0.0.1] com.sun.xml.ws.transport.http.servlet.WSServletContextListener.parseAdaptersAndCreateDelegate WSSERVLET11 : échec de l'analyse du descripteur d'exécution : jakarta.xml.ws.WebServiceException: class com.groupeisi.webservice.service.jaxws.Save do not have a property of the name classe&#10;  jakarta.xml.ws.WebServiceException: class com.groupeisi.webservice.service.jaxws.Save do not have a property of the name classe&#10;  ```&#10;&#10;### Erreur lors de la récupération d'une classe&#10;- **Réponse SOAP** :&#10;  ```xml&#10;  &lt;?xml version='1.0' encoding='UTF-8'?&gt;&#10;  &lt;S:Envelope xmlns:S=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&#10;      &lt;S:Body&gt;&#10;          &lt;S:Fault xmlns:ns4=&quot;http://www.w3.org/2003/05/soap-envelope&quot;&gt;&#10;              &lt;faultcode&gt;S:Server&lt;/faultcode&gt;&#10;              &lt;faultstring&gt;Can not set com.exam.metier.dto.SectorDto field com.groupeisi.webservice.service.jaxws.GetResponse._return to com.exam.metier.dto.ClasseDto&lt;/faultstring&gt;&#10;          &lt;/S:Fault&gt;&#10;      &lt;/S:Body&gt;&#10;  &lt;/S:Envelope&gt;&#10;  ```" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/metier/src/main/java/com/exam/metier/dao/IClasseDao.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/metier/src/main/java/com/exam/metier/dao/IClasseDao.java" />
              <option name="originalContent" value="package com.exam.metier.dao;&#10;&#10;import com.exam.metier.entity.Classes;&#10;import java.util.List;&#10;&#10;public interface IClasseDao {&#10;    void addClasse(Classes classe);&#10;&#10;    void updateClasse(Classes classe);&#10;&#10;    void deleteClasse(int id);&#10;&#10;    List&lt;Classes&gt; getAllClasses();&#10;&#10;    List&lt;Classes&gt; getClassesBySector(int sectorId);&#10;&#10;    Classes getClasseById(int id);&#10;}&#10;" />
              <option name="updatedContent" value="package com.exam.metier.dao;&#13;&#10;&#13;&#10;import com.exam.metier.entity.Classes;&#13;&#10;import java.util.List;&#13;&#10;&#13;&#10;public interface IClasseDao {&#13;&#10;    Classes addClasse(Classes classe);&#13;&#10;&#13;&#10;    void updateClasse(Classes classe);&#13;&#10;&#13;&#10;    void deleteClasse(int id);&#13;&#10;&#13;&#10;    List&lt;Classes&gt; getAllClasses();&#13;&#10;&#13;&#10;    List&lt;Classes&gt; getClassesBySector(int sectorId);&#13;&#10;&#13;&#10;    Classes getClasseById(int id);&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/metier/src/main/java/com/exam/metier/dto/ClasseDtoList.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/metier/src/main/java/com/exam/metier/dto/ClasseDtoList.java" />
              <option name="originalContent" value="package com.exam.metier.dto;&#10;&#10;import jakarta.xml.bind.annotation.XmlAccessType;&#10;import jakarta.xml.bind.annotation.XmlAccessorType;&#10;import jakarta.xml.bind.annotation.XmlElement;&#10;import jakarta.xml.bind.annotation.XmlRootElement;&#10;import java.util.List;&#10;&#10;@XmlRootElement(name = &quot;classes&quot;)&#10;@XmlAccessorType(XmlAccessType.FIELD)&#10;public class ClasseDtoList {&#10;&#10;    @XmlElement(name = &quot;classe&quot;)&#10;    private List&lt;ClasseDto&gt; classes;&#10;&#10;    public ClasseDtoList() {&#10;    }&#10;&#10;    public ClasseDtoList(List&lt;ClasseDto&gt; classes) {&#10;        this.classes = classes;&#10;    }&#10;&#10;    public List&lt;ClasseDto&gt; getClasses() {&#10;        return classes;&#10;    }&#10;&#10;    public void setClasses(List&lt;ClasseDto&gt; classes) {&#10;        this.classes = classes;&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.exam.metier.dto;&#10;&#10;import jakarta.xml.bind.annotation.*;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;@XmlRootElement(name = &quot;classeDtoList&quot;)&#10;@XmlAccessorType(XmlAccessType.FIELD)&#10;public class ClasseDtoList {&#10;&#10;    @XmlElementWrapper(name = &quot;classesList&quot;)&#10;    @XmlElement(name = &quot;classe&quot;)&#10;    private List&lt;ClasseDto&gt; classes;&#10;&#10;    public ClasseDtoList() {&#10;        this.classes = new ArrayList&lt;&gt;();&#10;    }&#10;&#10;    public ClasseDtoList(List&lt;ClasseDto&gt; classes) {&#10;        this.classes = classes != null ? classes : new ArrayList&lt;&gt;();&#10;    }&#10;&#10;    public List&lt;ClasseDto&gt; getClasses() {&#10;        return classes;&#10;    }&#10;&#10;    public void setClasses(List&lt;ClasseDto&gt; classes) {&#10;        this.classes = classes;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/metier/src/main/java/com/exam/metier/dto/ResponseDto.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/metier/src/main/java/com/exam/metier/dto/ResponseDto.java" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/metier/src/main/java/com/exam/metier/service/ClasseService.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/metier/src/main/java/com/exam/metier/service/ClasseService.java" />
              <option name="originalContent" value="package com.exam.metier.service;&#10;&#10;import com.exam.metier.dao.IClasseDao;&#10;import com.exam.metier.dto.ClasseDto;&#10;import com.exam.metier.entity.Classes;&#10;import com.exam.metier.exception.ClasseNotFoundException;&#10;import com.exam.metier.mapper.ClasseMapper;&#10;import java.util.List;&#10;import java.util.stream.Collectors;&#10;&#10;public class ClasseService implements IClasseService {&#10;&#10;    private final IClasseDao classeDao;&#10;&#10;    public ClasseService(IClasseDao classeDao) {&#10;        this.classeDao = classeDao;&#10;    }&#10;&#10;    @Override&#10;    public ClasseDto addClasse(ClasseDto classeDto) {&#10;        Classes classe = ClasseMapper.toEntity(classeDto);&#10;        classeDao.addClasse(classe);&#10;        return ClasseMapper.toDto(classe);&#10;    }&#10;&#10;    @Override&#10;    public void updateClasse(ClasseDto classeDto) {&#10;        Classes classe = classeDao.getClasseById(classeDto.getId());&#10;        if (classe == null) {&#10;            throw new ClasseNotFoundException(&quot;Classe not found&quot;);&#10;        }&#10;        classe.setClassName(classeDto.getClassName());&#10;        classe.setDescription(classeDto.getDescription());&#10;        classeDao.updateClasse(classe);&#10;    }&#10;&#10;    @Override&#10;    public void deleteClasse(int id) {&#10;        Classes classe = classeDao.getClasseById(id);&#10;        if (classe == null) {&#10;            throw new ClasseNotFoundException(&quot;Classe not found&quot;);&#10;        }&#10;        classeDao.deleteClasse(id);&#10;    }&#10;&#10;    @Override&#10;    public List&lt;ClasseDto&gt; getAllClasses() {&#10;        return classeDao.getAllClasses().stream()&#10;                .map(ClasseMapper::toDto)&#10;                .collect(Collectors.toList());&#10;    }&#10;&#10;    @Override&#10;    public List&lt;ClasseDto&gt; getClassesBySector(int sectorId) {&#10;        return classeDao.getClassesBySector(sectorId).stream()&#10;                .map(ClasseMapper::toDto)&#10;                .collect(Collectors.toList());&#10;    }&#10;&#10;    @Override&#10;    public ClasseDto getClasseById(int id) {&#10;        Classes classe = classeDao.getClasseById(id);&#10;        if (classe == null) {&#10;            throw new ClasseNotFoundException(&quot;Classe not found&quot;);&#10;        }&#10;        return ClasseMapper.toDto(classe);&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.exam.metier.service;&#10;&#10;import com.exam.metier.dao.IClasseDao;&#10;import com.exam.metier.dto.ClasseDto;&#10;import com.exam.metier.entity.Classes;&#10;import com.exam.metier.exception.ClasseNotFoundException;&#10;import com.exam.metier.mapper.ClasseMapper;&#10;import java.util.List;&#10;import java.util.stream.Collectors;&#10;&#10;public class ClasseService implements IClasseService {&#10;&#10;    private final IClasseDao classeDao;&#10;&#10;    public ClasseService(IClasseDao classeDao) {&#10;        this.classeDao = classeDao;&#10;    }&#10;&#10;    @Override&#10;    public ClasseDto addClasse(ClasseDto classeDto) {&#10;        Classes classe = ClasseMapper.toEntity(classeDto);&#10;        classe = classeDao.addClasse(classe);&#10;        return ClasseMapper.toDto(classe);&#10;    }&#10;&#10;    @Override&#10;    public void updateClasse(ClasseDto classeDto) {&#10;        Classes classe = classeDao.getClasseById(classeDto.getId());&#10;        if (classe == null) {&#10;            throw new ClasseNotFoundException(&quot;Classe not found&quot;);&#10;        }&#10;        classe.setClassName(classeDto.getClassName());&#10;        classe.setDescription(classeDto.getDescription());&#10;        classeDao.updateClasse(classe);&#10;    }&#10;&#10;    @Override&#10;    public void deleteClasse(int id) {&#10;        Classes classe = classeDao.getClasseById(id);&#10;        if (classe == null) {&#10;            throw new ClasseNotFoundException(&quot;Classe not found&quot;);&#10;        }&#10;        classeDao.deleteClasse(id);&#10;    }&#10;&#10;    @Override&#10;    public List&lt;ClasseDto&gt; getAllClasses() {&#10;        return classeDao.getAllClasses().stream()&#10;                .map(ClasseMapper::toDto)&#10;                .collect(Collectors.toList());&#10;    }&#10;&#10;    @Override&#10;    public List&lt;ClasseDto&gt; getClassesBySector(int sectorId) {&#10;        return classeDao.getClassesBySector(sectorId).stream()&#10;                .map(ClasseMapper::toDto)&#10;                .collect(Collectors.toList());&#10;    }&#10;&#10;    @Override&#10;    public ClasseDto getClasseById(int id) {&#10;        Classes classe = classeDao.getClasseById(id);&#10;        if (classe == null) {&#10;            throw new ClasseNotFoundException(&quot;Classe not found&quot;);&#10;        }&#10;        return ClasseMapper.toDto(classe);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/webservices/src/main/java/com/groupeisi/webservice/service/ClasseDtoList.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/webservices/src/main/java/com/groupeisi/webservice/service/ClasseDtoList.java" />
              <option name="updatedContent" value="package com.groupeisi.webservice.service;&#10;&#10;import com.exam.metier.dto.ClasseDto;&#10;import jakarta.xml.bind.annotation.XmlAccessType;&#10;import jakarta.xml.bind.annotation.XmlAccessorType;&#10;import jakarta.xml.bind.annotation.XmlElement;&#10;import jakarta.xml.bind.annotation.XmlRootElement;&#10;import java.util.List;&#10;&#10;@XmlRootElement(name = &quot;classes&quot;)&#10;@XmlAccessorType(XmlAccessType.FIELD)&#10;public class ClasseDtoList {&#10;    &#10;    @XmlElement(name = &quot;classe&quot;)&#10;    private List&lt;ClasseDto&gt; classes;&#10;&#10;    public ClasseDtoList() {&#10;    }&#10;&#10;    public ClasseDtoList(List&lt;ClasseDto&gt; classes) {&#10;        this.classes = classes;&#10;    }&#10;&#10;    public List&lt;ClasseDto&gt; getClasses() {&#10;        return classes;&#10;    }&#10;&#10;    public void setClasses(List&lt;ClasseDto&gt; classes) {&#10;        this.classes = classes;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/webservices/src/main/java/com/groupeisi/webservice/service/GetClasseRequest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/webservices/src/main/java/com/groupeisi/webservice/service/GetClasseRequest.java" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>