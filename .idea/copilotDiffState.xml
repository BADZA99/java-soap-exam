<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/metier/src/main/java/com/exam/metier/dao/ClasseDao.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/metier/src/main/java/com/exam/metier/dao/ClasseDao.java" />
              <option name="originalContent" value="package com.exam.metier.dao;&#10;&#10;import com.exam.metier.entity.Classes;&#10;import java.util.List;&#10;import org.hibernate.Session;&#10;import org.hibernate.Transaction;&#10;import com.exam.metier.config.HibernateUtil;&#10;&#10;public class ClasseDao implements IClasseDao {&#10;&#10;    private final Session session = HibernateUtil.getSessionFactory().openSession();&#10;&#10;    @Override&#10;    public void addClasse(Classes classe) {&#10;        Transaction transaction = session.beginTransaction();&#10;        session.save(classe);&#10;        transaction.commit();&#10;    }&#10;&#10;    @Override&#10;    public void updateClasse(Classes classe) {&#10;        Transaction transaction = session.beginTransaction();&#10;        session.update(classe);&#10;        transaction.commit();&#10;    }&#10;&#10;    @Override&#10;    public void deleteClasse(int id) {&#10;        Transaction transaction = session.beginTransaction();&#10;        Classes classe = session.get(Classes.class, id);&#10;        if (classe != null) {&#10;            session.delete(classe);&#10;        }&#10;        transaction.commit();&#10;    }&#10;&#10;    @Override&#10;    public List&lt;Classes&gt; getAllClasses() {&#10;        return session.createQuery(&quot;from Classes&quot;, Classes.class).list();&#10;    }&#10;&#10;    @Override&#10;    public List&lt;Classes&gt; getClassesBySector(int sectorId) {&#10;        return session.createQuery(&quot;from Classes where sector.id = :sectorId&quot;, Classes.class)&#10;                      .setParameter(&quot;sectorId&quot;, sectorId)&#10;                      .list();&#10;    }&#10;&#10;    @Override&#10;    public Classes getClasseById(int id) {&#10;        return session.get(Classes.class, id);&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.exam.metier.dao;&#13;&#10;&#13;&#10;import com.exam.metier.entity.Classes;&#13;&#10;import java.util.List;&#13;&#10;import org.hibernate.Session;&#13;&#10;import org.hibernate.Transaction;&#13;&#10;import com.exam.metier.config.HibernateUtil;&#13;&#10;&#13;&#10;public class ClasseDao implements IClasseDao {&#13;&#10;&#13;&#10;    private final Session session = HibernateUtil.getSessionFactory().openSession();&#13;&#10;&#13;&#10;    @Override&#13;&#10;    public Classes addClasse(Classes classe) {&#13;&#10;        Transaction transaction = session.beginTransaction();&#13;&#10;        session.save(classe);&#13;&#10;        transaction.commit();&#13;&#10;        return classe;&#13;&#10;    }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    public void updateClasse(Classes classe) {&#13;&#10;        Transaction transaction = session.beginTransaction();&#13;&#10;        session.update(classe);&#13;&#10;        transaction.commit();&#13;&#10;    }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    public void deleteClasse(int id) {&#13;&#10;        Transaction transaction = session.beginTransaction();&#13;&#10;        Classes classe = session.get(Classes.class, id);&#13;&#10;        if (classe != null) {&#13;&#10;            session.delete(classe);&#13;&#10;        }&#13;&#10;        transaction.commit();&#13;&#10;    }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    public List&lt;Classes&gt; getAllClasses() {&#13;&#10;        return session.createQuery(&quot;from Classes&quot;, Classes.class).list();&#13;&#10;    }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    public List&lt;Classes&gt; getClassesBySector(int sectorId) {&#13;&#10;        return session.createQuery(&quot;from Classes where sector.id = :sectorId&quot;, Classes.class)&#13;&#10;                      .setParameter(&quot;sectorId&quot;, sectorId)&#13;&#10;                      .list();&#13;&#10;    }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    public Classes getClasseById(int id) {&#13;&#10;        return session.get(Classes.class, id);&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/metier/src/main/java/com/exam/metier/dao/IClasseDao.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/metier/src/main/java/com/exam/metier/dao/IClasseDao.java" />
              <option name="originalContent" value="package com.exam.metier.dao;&#10;&#10;import com.exam.metier.entity.Classes;&#10;import java.util.List;&#10;&#10;public interface IClasseDao {&#10;    void addClasse(Classes classe);&#10;&#10;    void updateClasse(Classes classe);&#10;&#10;    void deleteClasse(int id);&#10;&#10;    List&lt;Classes&gt; getAllClasses();&#10;&#10;    List&lt;Classes&gt; getClassesBySector(int sectorId);&#10;&#10;    Classes getClasseById(int id);&#10;}&#10;" />
              <option name="updatedContent" value="package com.exam.metier.dao;&#13;&#10;&#13;&#10;import com.exam.metier.entity.Classes;&#13;&#10;import java.util.List;&#13;&#10;&#13;&#10;public interface IClasseDao {&#13;&#10;    Classes addClasse(Classes classe);&#13;&#10;&#13;&#10;    void updateClasse(Classes classe);&#13;&#10;&#13;&#10;    void deleteClasse(int id);&#13;&#10;&#13;&#10;    List&lt;Classes&gt; getAllClasses();&#13;&#10;&#13;&#10;    List&lt;Classes&gt; getClassesBySector(int sectorId);&#13;&#10;&#13;&#10;    Classes getClasseById(int id);&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/metier/src/main/java/com/exam/metier/dto/ClasseDtoList.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/metier/src/main/java/com/exam/metier/dto/ClasseDtoList.java" />
              <option name="originalContent" value="package com.exam.metier.dto;&#10;&#10;import jakarta.xml.bind.annotation.XmlAccessType;&#10;import jakarta.xml.bind.annotation.XmlAccessorType;&#10;import jakarta.xml.bind.annotation.XmlElement;&#10;import jakarta.xml.bind.annotation.XmlRootElement;&#10;import java.util.List;&#10;&#10;@XmlRootElement(name = &quot;classes&quot;)&#10;@XmlAccessorType(XmlAccessType.FIELD)&#10;public class ClasseDtoList {&#10;&#10;    @XmlElement(name = &quot;classe&quot;)&#10;    private List&lt;ClasseDto&gt; classes;&#10;&#10;    public ClasseDtoList() {&#10;    }&#10;&#10;    public ClasseDtoList(List&lt;ClasseDto&gt; classes) {&#10;        this.classes = classes;&#10;    }&#10;&#10;    public List&lt;ClasseDto&gt; getClasses() {&#10;        return classes;&#10;    }&#10;&#10;    public void setClasses(List&lt;ClasseDto&gt; classes) {&#10;        this.classes = classes;&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.exam.metier.dto;&#10;&#10;import jakarta.xml.bind.annotation.*;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;@XmlRootElement(name = &quot;classeDtoList&quot;)&#10;@XmlAccessorType(XmlAccessType.FIELD)&#10;public class ClasseDtoList {&#10;&#10;    @XmlElementWrapper(name = &quot;classesList&quot;)&#10;    @XmlElement(name = &quot;classe&quot;)&#10;    private List&lt;ClasseDto&gt; classes;&#10;&#10;    public ClasseDtoList() {&#10;        this.classes = new ArrayList&lt;&gt;();&#10;    }&#10;&#10;    public ClasseDtoList(List&lt;ClasseDto&gt; classes) {&#10;        this.classes = classes != null ? classes : new ArrayList&lt;&gt;();&#10;    }&#10;&#10;    public List&lt;ClasseDto&gt; getClasses() {&#10;        return classes;&#10;    }&#10;&#10;    public void setClasses(List&lt;ClasseDto&gt; classes) {&#10;        this.classes = classes;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/metier/src/main/java/com/exam/metier/dto/ResponseDto.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/metier/src/main/java/com/exam/metier/dto/ResponseDto.java" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/metier/src/main/java/com/exam/metier/service/ClasseService.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/metier/src/main/java/com/exam/metier/service/ClasseService.java" />
              <option name="originalContent" value="package com.exam.metier.service;&#10;&#10;import com.exam.metier.dao.IClasseDao;&#10;import com.exam.metier.dto.ClasseDto;&#10;import com.exam.metier.entity.Classes;&#10;import com.exam.metier.exception.ClasseNotFoundException;&#10;import com.exam.metier.mapper.ClasseMapper;&#10;import java.util.List;&#10;import java.util.stream.Collectors;&#10;&#10;public class ClasseService implements IClasseService {&#10;&#10;    private final IClasseDao classeDao;&#10;&#10;    public ClasseService(IClasseDao classeDao) {&#10;        this.classeDao = classeDao;&#10;    }&#10;&#10;    @Override&#10;    public ClasseDto addClasse(ClasseDto classeDto) {&#10;        Classes classe = ClasseMapper.toEntity(classeDto);&#10;        classeDao.addClasse(classe);&#10;        return ClasseMapper.toDto(classe);&#10;    }&#10;&#10;    @Override&#10;    public void updateClasse(ClasseDto classeDto) {&#10;        Classes classe = classeDao.getClasseById(classeDto.getId());&#10;        if (classe == null) {&#10;            throw new ClasseNotFoundException(&quot;Classe not found&quot;);&#10;        }&#10;        classe.setClassName(classeDto.getClassName());&#10;        classe.setDescription(classeDto.getDescription());&#10;        classeDao.updateClasse(classe);&#10;    }&#10;&#10;    @Override&#10;    public void deleteClasse(int id) {&#10;        Classes classe = classeDao.getClasseById(id);&#10;        if (classe == null) {&#10;            throw new ClasseNotFoundException(&quot;Classe not found&quot;);&#10;        }&#10;        classeDao.deleteClasse(id);&#10;    }&#10;&#10;    @Override&#10;    public List&lt;ClasseDto&gt; getAllClasses() {&#10;        return classeDao.getAllClasses().stream()&#10;                .map(ClasseMapper::toDto)&#10;                .collect(Collectors.toList());&#10;    }&#10;&#10;    @Override&#10;    public List&lt;ClasseDto&gt; getClassesBySector(int sectorId) {&#10;        return classeDao.getClassesBySector(sectorId).stream()&#10;                .map(ClasseMapper::toDto)&#10;                .collect(Collectors.toList());&#10;    }&#10;&#10;    @Override&#10;    public ClasseDto getClasseById(int id) {&#10;        Classes classe = classeDao.getClasseById(id);&#10;        if (classe == null) {&#10;            throw new ClasseNotFoundException(&quot;Classe not found&quot;);&#10;        }&#10;        return ClasseMapper.toDto(classe);&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.exam.metier.service;&#10;&#10;import com.exam.metier.dao.IClasseDao;&#10;import com.exam.metier.dto.ClasseDto;&#10;import com.exam.metier.entity.Classes;&#10;import com.exam.metier.exception.ClasseNotFoundException;&#10;import com.exam.metier.mapper.ClasseMapper;&#10;import java.util.List;&#10;import java.util.stream.Collectors;&#10;&#10;public class ClasseService implements IClasseService {&#10;&#10;    private final IClasseDao classeDao;&#10;&#10;    public ClasseService(IClasseDao classeDao) {&#10;        this.classeDao = classeDao;&#10;    }&#10;&#10;    @Override&#10;    public ClasseDto addClasse(ClasseDto classeDto) {&#10;        Classes classe = ClasseMapper.toEntity(classeDto);&#10;        classe = classeDao.addClasse(classe);&#10;        return ClasseMapper.toDto(classe);&#10;    }&#10;&#10;    @Override&#10;    public void updateClasse(ClasseDto classeDto) {&#10;        Classes classe = classeDao.getClasseById(classeDto.getId());&#10;        if (classe == null) {&#10;            throw new ClasseNotFoundException(&quot;Classe not found&quot;);&#10;        }&#10;        classe.setClassName(classeDto.getClassName());&#10;        classe.setDescription(classeDto.getDescription());&#10;        classeDao.updateClasse(classe);&#10;    }&#10;&#10;    @Override&#10;    public void deleteClasse(int id) {&#10;        Classes classe = classeDao.getClasseById(id);&#10;        if (classe == null) {&#10;            throw new ClasseNotFoundException(&quot;Classe not found&quot;);&#10;        }&#10;        classeDao.deleteClasse(id);&#10;    }&#10;&#10;    @Override&#10;    public List&lt;ClasseDto&gt; getAllClasses() {&#10;        return classeDao.getAllClasses().stream()&#10;                .map(ClasseMapper::toDto)&#10;                .collect(Collectors.toList());&#10;    }&#10;&#10;    @Override&#10;    public List&lt;ClasseDto&gt; getClassesBySector(int sectorId) {&#10;        return classeDao.getClassesBySector(sectorId).stream()&#10;                .map(ClasseMapper::toDto)&#10;                .collect(Collectors.toList());&#10;    }&#10;&#10;    @Override&#10;    public ClasseDto getClasseById(int id) {&#10;        Classes classe = classeDao.getClasseById(id);&#10;        if (classe == null) {&#10;            throw new ClasseNotFoundException(&quot;Classe not found&quot;);&#10;        }&#10;        return ClasseMapper.toDto(classe);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/metier/src/main/java/com/exam/metier/service/IClasseService.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/metier/src/main/java/com/exam/metier/service/IClasseService.java" />
              <option name="originalContent" value="package com.exam.metier.service;&#10;&#10;import com.exam.metier.dto.ClasseDto;&#10;import java.util.List;&#10;&#10;public interface IClasseService {&#10;    void addClasse(ClasseDto classeDto);&#10;&#10;    void updateClasse(ClasseDto classeDto);&#10;&#10;    void deleteClasse(int id);&#10;&#10;    List&lt;ClasseDto&gt; getAllClasses();&#10;&#10;    List&lt;ClasseDto&gt; getClassesBySector(int sectorId);&#10;&#10;    ClasseDto getClasseById(int id);&#10;}&#10;" />
              <option name="updatedContent" value="package com.exam.metier.service;&#13;&#10;&#13;&#10;import com.exam.metier.dto.ClasseDto;&#13;&#10;import java.util.List;&#13;&#10;&#13;&#10;public interface IClasseService {&#13;&#10;    ClasseDto addClasse(ClasseDto classeDto);&#13;&#10;&#13;&#10;    void updateClasse(ClasseDto classeDto);&#13;&#10;&#13;&#10;    void deleteClasse(int id);&#13;&#10;&#13;&#10;    List&lt;ClasseDto&gt; getAllClasses();&#13;&#10;&#13;&#10;    List&lt;ClasseDto&gt; getClassesBySector(int sectorId);&#13;&#10;&#13;&#10;    ClasseDto getClasseById(int id);&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/webservices/src/main/java/com/groupeisi/webservice/service/ClasseDtoList.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/webservices/src/main/java/com/groupeisi/webservice/service/ClasseDtoList.java" />
              <option name="updatedContent" value="package com.groupeisi.webservice.service;&#10;&#10;import com.exam.metier.dto.ClasseDto;&#10;import jakarta.xml.bind.annotation.XmlAccessType;&#10;import jakarta.xml.bind.annotation.XmlAccessorType;&#10;import jakarta.xml.bind.annotation.XmlElement;&#10;import jakarta.xml.bind.annotation.XmlRootElement;&#10;import java.util.List;&#10;&#10;@XmlRootElement(name = &quot;classes&quot;)&#10;@XmlAccessorType(XmlAccessType.FIELD)&#10;public class ClasseDtoList {&#10;    &#10;    @XmlElement(name = &quot;classe&quot;)&#10;    private List&lt;ClasseDto&gt; classes;&#10;&#10;    public ClasseDtoList() {&#10;    }&#10;&#10;    public ClasseDtoList(List&lt;ClasseDto&gt; classes) {&#10;        this.classes = classes;&#10;    }&#10;&#10;    public List&lt;ClasseDto&gt; getClasses() {&#10;        return classes;&#10;    }&#10;&#10;    public void setClasses(List&lt;ClasseDto&gt; classes) {&#10;        this.classes = classes;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/webservices/src/main/java/com/groupeisi/webservice/service/ClasseWebService.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/webservices/src/main/java/com/groupeisi/webservice/service/ClasseWebService.java" />
              <option name="originalContent" value="package com.groupeisi.webservice.service;&#10;&#10;import java.util.List;&#10;import com.exam.metier.dto.ClasseDto;&#10;import jakarta.jws.WebMethod;&#10;import jakarta.jws.WebService;&#10;import jakarta.jws.WebParam;&#10;import jakarta.jws.WebResult;&#10;import jakarta.xml.bind.annotation.XmlSeeAlso;&#10;&#10;@WebService(targetNamespace = &quot;http://service.webservice.groupeisi.com/&quot;)&#10;@XmlSeeAlso({ClasseDto.class})&#10;public interface ClasseWebService {&#10;    @WebMethod(operationName = &quot;getClasse&quot;)&#10;    @WebResult(name = &quot;return&quot;)&#10;    ClasseDto get(@WebParam(name = &quot;id&quot;) int id);&#10;&#10;    @WebMethod(operationName = &quot;allClasses&quot;)&#10;    @WebResult(name = &quot;return&quot;)&#10;    List&lt;ClasseDto&gt; all();&#10;&#10;    @WebMethod(operationName = &quot;saveClasse&quot;)&#10;    @WebResult(name = &quot;return&quot;)&#10;    ClasseDto save(@WebParam(name = &quot;classeDto&quot;) ClasseDto classeDto);&#10;}" />
              <option name="updatedContent" value="package com.groupeisi.webservice.service;&#10;&#10;import java.util.List;&#10;import com.exam.metier.dto.ClasseDto;&#10;import jakarta.jws.WebMethod;&#10;import jakarta.jws.WebService;&#10;import jakarta.jws.WebParam;&#10;import jakarta.jws.WebResult;&#10;import jakarta.xml.bind.annotation.XmlSeeAlso;&#10;&#10;@WebService(targetNamespace = &quot;http://service.webservice.groupeisi.com/&quot;)&#10;@XmlSeeAlso({ClasseDto.class})&#10;public interface ClasseWebService {&#10;    @WebMethod(operationName = &quot;getClasse&quot;)&#10;    @WebResult(name = &quot;return&quot;)&#10;    ClasseDto get(@WebParam(name = &quot;id&quot;) int id);&#10;&#10;    @WebMethod(operationName = &quot;allClasses&quot;)&#10;    @WebResult(name = &quot;return&quot;)&#10;    List&lt;ClasseDto&gt; all();&#10;&#10;    /**&#10;     * Saves a new ClasseDto object.&#10;     *&#10;     * @param classeDto The ClasseDto object to be saved. Must not be null and must have a valid className.&#10;     * @return The saved ClasseDto object.&#10;     * @throws RuntimeException if the className is null or empty.&#10;     */&#10;    @WebMethod(operationName = &quot;saveClasse&quot;)&#10;    @WebResult(name = &quot;return&quot;)&#10;    ClasseDto save(@WebParam(name = &quot;classeDto&quot;) ClasseDto classeDto);&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/webservices/src/main/java/com/groupeisi/webservice/service/ClasseWebServiceImpl.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/webservices/src/main/java/com/groupeisi/webservice/service/ClasseWebServiceImpl.java" />
              <option name="originalContent" value="package com.groupeisi.webservice.service;&#10;&#10;import java.util.List;&#10;&#10;import com.exam.metier.dao.ClasseDao;&#10;import com.exam.metier.dto.ClasseDto;&#10;import com.exam.metier.service.ClasseService;&#10;import com.exam.metier.service.IClasseService;&#10;import com.exam.metier.dto.SectorDto;&#10;import jakarta.jws.WebMethod;&#10;import jakarta.jws.WebService;&#10;import jakarta.jws.WebParam;&#10;import jakarta.xml.bind.annotation.XmlSeeAlso;&#10;&#10;@WebService(&#10;    endpointInterface = &quot;com.groupeisi.webservice.service.ClasseWebService&quot;,&#10;    serviceName = &quot;ClasseWebService&quot;&#10;)&#10;@XmlSeeAlso({ClasseDto.class, SectorDto.class})&#10;public class ClasseWebServiceImpl implements ClasseWebService {&#10;&#10;    private final IClasseService classeService;&#10;&#10;    // No-argument constructor&#10;    public ClasseWebServiceImpl() {&#10;        // Initialize classeService with a default implementation&#10;        this.classeService = new ClasseService(new ClasseDao());&#10;        // Replace with actual implementation&#10;    }&#10;&#10;    public ClasseWebServiceImpl(IClasseService classeService) {&#10;        this.classeService = classeService;&#10;    }&#10;&#10;&#10;&#10;    @Override&#10;    @WebMethod(operationName = &quot;getClasse&quot;)&#10;    public ClasseDto get(@WebParam(name = &quot;id&quot;) int idClasse) {&#10;        return classeService.getClasseById(idClasse);&#10;    }&#10;&#10;    @Override&#10;    @WebMethod(operationName = &quot;allClasses&quot;)&#10;    public List&lt;ClasseDto&gt; all() {&#10;        return classeService.getAllClasses();&#10;    }&#10;&#10;    /*@Override&#10;    @WebMethod(operationName = &quot;saveClasse&quot;)&#10;    public ClasseDto save(@WebParam(name = &quot;classeDto&quot;) ClasseDto classeDto) {&#10;        if (classeDto == null || classeDto.getClassName() == null || classeDto.getClassName().isEmpty()) {&#10;            throw new IllegalArgumentException(&quot;Class name is required&quot;);&#10;        }&#10;&#10;        classeDto = classeService.addClasse(classeDto);&#10;        classeDto.setDescription(&quot;Class saved successfully&quot;);&#10;        return classeDto;&#10;    }*/&#10;}" />
              <option name="updatedContent" value="package com.groupeisi.webservice.service;&#10;&#10;import java.util.List;&#10;&#10;import com.exam.metier.dao.ClasseDao;&#10;import com.exam.metier.dto.ClasseDto;&#10;import com.exam.metier.service.ClasseService;&#10;import com.exam.metier.service.IClasseService;&#10;import com.exam.metier.dto.SectorDto;&#10;import jakarta.jws.WebMethod;&#10;import jakarta.jws.WebService;&#10;import jakarta.jws.WebParam;&#10;import jakarta.xml.bind.annotation.XmlSeeAlso;&#10;&#10;@WebService(&#10;    endpointInterface = &quot;com.groupeisi.webservice.service.ClasseWebService&quot;,&#10;    serviceName = &quot;ClasseWebService&quot;&#10;)&#10;@XmlSeeAlso({ClasseDto.class, SectorDto.class})&#10;public class ClasseWebServiceImpl implements ClasseWebService {&#10;&#10;    private final IClasseService classeService;&#10;&#10;    // No-argument constructor&#10;    public ClasseWebServiceImpl() {&#10;        // Initialize classeService with a default implementation&#10;        this.classeService = new ClasseService(new ClasseDao());&#10;        // Replace with actual implementation&#10;    }&#10;&#10;    public ClasseWebServiceImpl(IClasseService classeService) {&#10;        this.classeService = classeService;&#10;    }&#10;&#10;&#10;&#10;    @Override&#10;    @WebMethod(operationName = &quot;getClasse&quot;)&#10;    public ClasseDto get(@WebParam(name = &quot;id&quot;) int idClasse) {&#10;        return classeService.getClasseById(idClasse);&#10;    }&#10;&#10;    @Override&#10;    @WebMethod(operationName = &quot;allClasses&quot;)&#10;    public List&lt;ClasseDto&gt; all() {&#10;        return classeService.getAllClasses();&#10;    }&#10;&#10;    @Override&#10;    @WebMethod(operationName = &quot;saveClasse&quot;)&#10;    public ClasseDto save(@WebParam(name = &quot;classeDto&quot;) ClasseDto classeDto) {&#10;        if (classeDto == null || classeDto.getClassName() == null || classeDto.getClassName().isEmpty()) {&#10;            throw new IllegalArgumentException(&quot;Class name is required&quot;);&#10;        }&#10;&#10;        classeDto = classeService.addClasse(classeDto);&#10;        classeDto.setDescription(&quot;Class saved successfully&quot;);&#10;        return classeDto;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/webservices/src/main/java/com/groupeisi/webservice/service/GetClasseRequest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/webservices/src/main/java/com/groupeisi/webservice/service/GetClasseRequest.java" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>