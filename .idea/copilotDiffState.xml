<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/metier/src/main/java/com/exam/metier/dao/IClasseDao.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/metier/src/main/java/com/exam/metier/dao/IClasseDao.java" />
              <option name="originalContent" value="package com.exam.metier.dao;&#10;&#10;import com.exam.metier.entity.Classes;&#10;import java.util.List;&#10;&#10;public interface IClasseDao {&#10;    void addClasse(Classes classe);&#10;&#10;    void updateClasse(Classes classe);&#10;&#10;    void deleteClasse(Long id);&#10;&#10;    List&lt;Classes&gt; getAllClasses();&#10;&#10;    List&lt;Classes&gt; getClassesBySector(Long sectorId);&#10;&#10;    Classes getClasseById(Long id);&#10;}&#10;" />
              <option name="updatedContent" value="package com.exam.metier.dao;&#13;&#10;&#13;&#10;import com.exam.metier.entity.Classes;&#13;&#10;import java.util.List;&#13;&#10;&#13;&#10;public interface IClasseDao {&#13;&#10;    void addClasse(Classes classe);&#13;&#10;&#13;&#10;    void updateClasse(Classes classe);&#13;&#10;&#13;&#10;    void deleteClasse(int id);&#13;&#10;&#13;&#10;    List&lt;Classes&gt; getAllClasses();&#13;&#10;&#13;&#10;    List&lt;Classes&gt; getClassesBySector(Long sectorId);&#13;&#10;&#13;&#10;    Classes getClasseById(int id);&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/metier/src/main/java/com/exam/metier/dto/ClasseDto.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/metier/src/main/java/com/exam/metier/dto/ClasseDto.java" />
              <option name="originalContent" value="package com.exam.metier.dto;&#10;&#10;import java.io.Serializable;&#10;import javax.xml.bind.annotation.XmlAccessType;&#10;import javax.xml.bind.annotation.XmlAccessorType;&#10;import javax.xml.bind.annotation.XmlElement;&#10;import javax.xml.bind.annotation.XmlRootElement;&#10;&#10;@XmlRootElement&#10;@XmlAccessorType(XmlAccessType.FIELD)&#10;public class ClasseDto implements Serializable {&#10;&#10;    @XmlElement(name = &quot;id&quot;, required = true)&#10;    private int id;&#10;&#10;    @XmlElement(name = &quot;className&quot;, required = true)&#10;    private String className;&#10;&#10;    @XmlElement(name = &quot;description&quot;)&#10;    private String description;&#10;&#10;    @XmlElement(name = &quot;sectorId&quot;)&#10;    private int sectorId;&#10;&#10;    public ClasseDto() {&#10;        super();&#10;    }&#10;&#10;    public ClasseDto(int id, String className, String description, int sectorId) {&#10;        super();&#10;        this.id = id;&#10;        this.className = className;&#10;        this.description = description;&#10;        this.sectorId = sectorId;&#10;    }&#10;&#10;    // Getters and Setters&#10;    public int getId() {&#10;        return id;&#10;    }&#10;&#10;    public void setId(int id) {&#10;        this.id = id;&#10;    }&#10;&#10;    public String getClassName() {&#10;        return className;&#10;    }&#10;&#10;    public void setClassName(String className) {&#10;        this.className = className;&#10;    }&#10;&#10;    public String getDescription() {&#10;        return description;&#10;    }&#10;&#10;    public void setDescription(String description) {&#10;        this.description = description;&#10;    }&#10;&#10;    public int getSectorId() {&#10;        return sectorId;&#10;    }&#10;&#10;    public void setSectorId(int sectorId) {&#10;        this.sectorId = sectorId;&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.exam.metier.dto;&#10;&#10;import java.io.Serializable;&#10;import javax.xml.bind.annotation.XmlAccessType;&#10;import javax.xml.bind.annotation.XmlAccessorType;&#10;import javax.xml.bind.annotation.XmlElement;&#10;import javax.xml.bind.annotation.XmlRootElement;&#10;&#10;@XmlRootElement&#10;@XmlAccessorType(XmlAccessType.FIELD)&#10;public class ClasseDto implements Serializable {&#10;&#10;    @XmlElement(name = &quot;id&quot;, required = true)&#10;    private int id;&#10;&#10;    @XmlElement(name = &quot;className&quot;, required = true)&#10;    private String className;&#10;&#10;    @XmlElement(name = &quot;description&quot;)&#10;    private String description;&#10;&#10;    @XmlElement(name = &quot;sectorId&quot;)&#10;    private int sectorId;&#10;&#10;    public ClasseDto() {&#10;        super();&#10;    }&#10;&#10;    public ClasseDto(int id, String className, String description, int sectorId) {&#10;        this.id = id;&#10;        this.className = className;&#10;        this.description = description;&#10;        this.sectorId = sectorId;&#10;    }&#10;&#10;    // Getters and Setters&#10;    public int getId() {&#10;        return id;&#10;    }&#10;&#10;    public void setId(int id) {&#10;        this.id = id;&#10;    }&#10;&#10;    public String getClassName() {&#10;        return className;&#10;    }&#10;&#10;    public void setClassName(String className) {&#10;        this.className = className;&#10;    }&#10;&#10;    public String getDescription() {&#10;        return description;&#10;    }&#10;&#10;    public void setDescription(String description) {&#10;        this.description = description;&#10;    }&#10;&#10;    public int getSectorId() {&#10;        return sectorId;&#10;    }&#10;&#10;    public void setSectorId(int sectorId) {&#10;        this.sectorId = sectorId;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/metier/src/main/java/com/exam/metier/dto/ResponseDto.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/metier/src/main/java/com/exam/metier/dto/ResponseDto.java" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/metier/src/main/java/com/exam/metier/dto/SectorDto.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/metier/src/main/java/com/exam/metier/dto/SectorDto.java" />
              <option name="originalContent" value="package com.exam.metier.dto;&#10;&#10;import java.util.List;&#10;import javax.xml.bind.annotation.XmlAccessType;&#10;import javax.xml.bind.annotation.XmlAccessorType;&#10;import javax.xml.bind.annotation.XmlElement;&#10;import javax.xml.bind.annotation.XmlRootElement;&#10;import java.io.Serializable;&#10;&#10;@XmlRootElement&#10;@XmlAccessorType(XmlAccessType.FIELD)&#10;public class SectorDto implements Serializable {&#10;&#10;&#10;    @XmlElement(name = &quot;id&quot;, required = true)&#10;    private Long id;&#10;&#10;    @XmlElement(name = &quot;name&quot;, required = true)&#10;    private String name;&#10;&#10;    @XmlElement(name = &quot;classes&quot;)&#10;    private List&lt;ClasseDto&gt; classes;&#10;&#10;    public SectorDto() {&#10;        &#9;super();&#10;    }&#10;&#10;    public SectorDto(Long id, String name) {&#10;        &#9;super();&#10;        this.id = id;&#10;        this.name = name;&#10;    }&#10;&#10;    // Getters and Setters&#10;    public Long getId() {&#10;        return id;&#10;    }&#10;&#10;    public void setId(Long id) {&#10;        this.id = id;&#10;    }&#10;&#10;    public String getName() {&#10;        return name;&#10;    }&#10;&#10;    public void setName(String name) {&#10;        this.name = name;&#10;    }&#10;&#10;    public List&lt;ClasseDto&gt; getClasses() {&#10;        return classes;&#10;    }&#10;&#10;    public void setClasses(List&lt;ClasseDto&gt; classes) {&#10;        this.classes = classes;&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.exam.metier.dto;&#10;&#10;import java.util.List;&#10;import javax.xml.bind.annotation.XmlAccessType;&#10;import javax.xml.bind.annotation.XmlAccessorType;&#10;import javax.xml.bind.annotation.XmlElement;&#10;import javax.xml.bind.annotation.XmlRootElement;&#10;import java.io.Serializable;&#10;&#10;@XmlRootElement&#10;@XmlAccessorType(XmlAccessType.FIELD)&#10;public class SectorDto implements Serializable {&#10;&#10;&#10;    @XmlElement(name = &quot;id&quot;, required = true)&#10;    private int id;&#10;&#10;    @XmlElement(name = &quot;name&quot;, required = true)&#10;    private String name;&#10;&#10;    @XmlElement(name = &quot;classes&quot;)&#10;    private List&lt;ClasseDto&gt; classes;&#10;&#10;    public SectorDto() {&#10;        &#9;super();&#10;    }&#10;&#10;    public SectorDto(int id, String name) {&#10;        &#9;super();&#10;        this.id = id;&#10;        this.name = name;&#10;    }&#10;&#10;    // Getters and Setters&#10;    public int getId() {&#10;        return id;&#10;    }&#10;&#10;    public void setId(int id) {&#10;        this.id = id;&#10;    }&#10;&#10;    public String getName() {&#10;        return name;&#10;    }&#10;&#10;    public void setName(String name) {&#10;        this.name = name;&#10;    }&#10;&#10;    public List&lt;ClasseDto&gt; getClasses() {&#10;        return classes;&#10;    }&#10;&#10;    public void setClasses(List&lt;ClasseDto&gt; classes) {&#10;        this.classes = classes;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/metier/src/main/java/com/exam/metier/entity/Classes.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/metier/src/main/java/com/exam/metier/entity/Classes.java" />
              <option name="originalContent" value="package com.exam.metier.entity;&#10;&#10;import javax.persistence.*;&#10;&#10;@Entity&#10;@Table(name = &quot;classes&quot;)&#10;public class Classes {&#10;&#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    private Long id;&#10;&#10;    @Column(name = &quot;class_name&quot;, nullable = false)&#10;    private String className;&#10;&#10;    @Column(name = &quot;description&quot;)&#10;    private String description;&#10;&#10;    @ManyToOne&#10;    @JoinColumn(name = &quot;sector_id&quot;, nullable = false)&#10;    private Sectors sector;&#10;&#10;    @Column(name = &quot;className&quot;, nullable = false)&#10;    private String className1;&#10;&#10;    public String getClassName1() {&#10;        return className1;&#10;    }&#10;&#10;    public void setClassName1(String className1) {&#10;        this.className1 = className1;&#10;    }&#10;&#10;    // Default constructor&#10;    public Classes() {&#10;    }&#10;&#10;    // Parameterized constructor&#10;    public Classes(Long id, String className, String description, Sectors sector) {&#10;        this.id = id;&#10;        this.className = className;&#10;        this.description = description;&#10;        this.sector = sector;&#10;    }&#10;&#10;    // Getters and Setters&#10;    public Long getId() {&#10;        return id;&#10;    }&#10;&#10;    public void setId(Long id) {&#10;        this.id = id;&#10;    }&#10;&#10;    public String getClassName() {&#10;        return className;&#10;    }&#10;&#10;    public void setClassName(String className) {&#10;        this.className = className;&#10;    }&#10;&#10;    public String getDescription() {&#10;        return description;&#10;    }&#10;&#10;    public void setDescription(String description) {&#10;        this.description = description;&#10;    }&#10;&#10;    public Sectors getSector() {&#10;        return sector;&#10;    }&#10;&#10;    public void setSector(Sectors sector) {&#10;        this.sector = sector;&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.exam.metier.entity;&#10;&#10;import javax.persistence.*;&#10;&#10;@Entity&#10;@Table(name = &quot;classes&quot;)&#10;public class Classes {&#10;&#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    private int id;&#10;&#10;    @Column(name = &quot;class_name&quot;, nullable = false)&#10;    private String className;&#10;&#10;    @Column(name = &quot;description&quot;)&#10;    private String description;&#10;&#10;    @ManyToOne&#10;    @JoinColumn(name = &quot;sector_id&quot;, nullable = false)&#10;    private Sectors sector;&#10;&#10;    @Column(name = &quot;className&quot;, nullable = false)&#10;    private String className1;&#10;&#10;    public String getClassName1() {&#10;        return className1;&#10;    }&#10;&#10;    public void setClassName1(String className1) {&#10;        this.className1 = className1;&#10;    }&#10;&#10;    // Default constructor&#10;    public Classes() {&#10;    }&#10;&#10;    // Parameterized constructor&#10;    public Classes(int id, String className, String description, Sectors sector) {&#10;        this.id = id;&#10;        this.className = className;&#10;        this.description = description;&#10;        this.sector = sector;&#10;    }&#10;&#10;    // Getters and Setters&#10;    public int getId() {&#10;        return id;&#10;    }&#10;&#10;    public void setId(int id) {&#10;        this.id = id;&#10;    }&#10;&#10;    public String getClassName() {&#10;        return className;&#10;    }&#10;&#10;    public void setClassName(String className) {&#10;        this.className = className;&#10;    }&#10;&#10;    public String getDescription() {&#10;        return description;&#10;    }&#10;&#10;    public void setDescription(String description) {&#10;        this.description = description;&#10;    }&#10;&#10;    public Sectors getSector() {&#10;        return sector;&#10;    }&#10;&#10;    public void setSector(Sectors sector) {&#10;        this.sector = sector;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/metier/src/main/java/com/exam/metier/entity/Sectors.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/metier/src/main/java/com/exam/metier/entity/Sectors.java" />
              <option name="originalContent" value="package com.exam.metier.entity;&#10;&#10;import javax.persistence.*;&#10;import java.util.List;&#10;&#10;@Entity&#10;@Table(name = &quot;Sectors&quot;)&#10;public class Sectors {&#10;&#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    private Integer id;&#10;&#10;    @Column(name = &quot;name&quot;, nullable = false)&#10;    private String name;&#10;&#10;    @OneToMany(mappedBy = &quot;sector&quot;, cascade = CascadeType.ALL, orphanRemoval = true)&#10;    private List&lt;Classes&gt; classes;&#10;&#10;    // Default constructor&#10;    public Sectors() {&#10;    }&#10;&#10;    // Parameterized constructor&#10;    public Sectors(int id, String name, List&lt;Classes&gt; classes) {&#10;        this.id = id;&#10;        this.name = name;&#10;        this.classes = classes;&#10;    }&#10;&#10;    // Getters and Setters&#10;    public int getId() {&#10;        return id;&#10;    }&#10;&#10;   &#10;&#10;    public String getName() {&#10;        return name;&#10;    }&#10;&#10;    public void setName(String name) {&#10;        this.name = name;&#10;    }&#10;&#10;    public List&lt;Classes&gt; getClasses() {&#10;        return classes;&#10;    }&#10;&#10;    public void setClasses(List&lt;Classes&gt; classes) {&#10;        this.classes = classes;&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.exam.metier.entity;&#10;&#10;import javax.persistence.*;&#10;import java.util.List;&#10;&#10;@Entity&#10;@Table(name = &quot;Sectors&quot;)&#10;public class Sectors {&#10;&#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    private int id;&#10;&#10;    @Column(name = &quot;name&quot;, nullable = false)&#10;    private String name;&#10;&#10;    @OneToMany(mappedBy = &quot;sector&quot;, cascade = CascadeType.ALL, orphanRemoval = true)&#10;    private List&lt;Classes&gt; classes;&#10;&#10;    // Default constructor&#10;    public Sectors() {&#10;    }&#10;&#10;    // Parameterized constructor&#10;    public Sectors(int id, String name, List&lt;Classes&gt; classes) {&#10;        this.id = id;&#10;        this.name = name;&#10;        this.classes = classes;&#10;    }&#10;&#10;    // Getters and Setters&#10;    public int getId() {&#10;        return id;&#10;    }&#10;&#10;    public String getName() {&#10;        return name;&#10;    }&#10;&#10;    public void setName(String name) {&#10;        this.name = name;&#10;    }&#10;&#10;    public List&lt;Classes&gt; getClasses() {&#10;        return classes;&#10;    }&#10;&#10;    public void setClasses(List&lt;Classes&gt; classes) {&#10;        this.classes = classes;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/metier/src/main/java/com/exam/metier/mapper/ClasseMapper.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/metier/src/main/java/com/exam/metier/mapper/ClasseMapper.java" />
              <option name="originalContent" value="package com.exam.metier.mapper;&#10;&#10;import com.exam.metier.dto.ClasseDto;&#10;import com.exam.metier.entity.Classes;&#10;&#10;public class ClasseMapper {&#10;&#10;    public static ClasseDto toDto(Classes classe) {&#10;        return new ClasseDto(classe.getId().intValue(), classe.getClassName(), classe.getDescription(),&#10;                classe.getSector().getId());&#10;    }&#10;&#10;    public static Classes toEntity(ClasseDto dto) {&#10;        Classes classe = new Classes();&#10;        classe.setId(dto.getId());&#10;        classe.setClassName(dto.getClassName());&#10;        classe.setDescription(dto.getDescription());&#10;        return classe;&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.exam.metier.mapper;&#10;&#10;import com.exam.metier.dto.ClasseDto;&#10;import com.exam.metier.entity.Classes;&#10;&#10;public class ClasseMapper {&#10;&#10;    public static ClasseDto toDto(Classes classe) {&#10;        return new ClasseDto(classe.getId(), classe.getClassName(), classe.getDescription(),&#10;                classe.getSector().getId());&#10;    }&#10;&#10;    public static Classes toEntity(ClasseDto dto) {&#10;        Classes classe = new Classes();&#10;        classe.setId(dto.getId());&#10;        classe.setClassName(dto.getClassName());&#10;        classe.setDescription(dto.getDescription());&#10;        return classe;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/metier/src/main/java/com/exam/metier/mapper/SectorMapper.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/metier/src/main/java/com/exam/metier/mapper/SectorMapper.java" />
              <option name="originalContent" value="package com.exam.metier.mapper;&#10;&#10;import com.exam.metier.dto.SectorDto;&#10;import com.exam.metier.entity.Sectors;&#10;&#10;public class SectorMapper {&#10;&#10;    public static SectorDto toDto(Sectors sector) {&#10;        return new SectorDto(sector.getId(), sector.getName());&#10;    }&#10;&#10;    public static Sectors toEntity(SectorDto dto) {&#10;        Sectors sector = new Sectors();&#10;        sector.setId(dto.getId());&#10;        sector.setName(dto.getName());&#10;        return sector;&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.exam.metier.mapper;&#10;&#10;import com.exam.metier.dto.SectorDto;&#10;import com.exam.metier.entity.Sectors;&#10;&#10;public class SectorMapper {&#10;&#10;    public static SectorDto toDto(Sectors sector) {&#10;        return new SectorDto(sector.getId(), sector.getName());&#10;    }&#10;&#10;    public static Sectors toEntity(SectorDto dto) {&#10;        Sectors sector = new Sectors();&#10;        sector.setName(dto.getName());&#10;        return sector;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/metier/src/main/java/com/exam/metier/service/ClasseService.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/metier/src/main/java/com/exam/metier/service/ClasseService.java" />
              <option name="originalContent" value="package com.exam.metier.service;&#10;&#10;import com.exam.metier.dao.IClasseDao;&#10;import com.exam.metier.dto.ClasseDto;&#10;import com.exam.metier.entity.Classes;&#10;import com.exam.metier.exception.ClasseNotFoundException;&#10;import com.exam.metier.mapper.ClasseMapper;&#10;import java.util.List;&#10;import java.util.stream.Collectors;&#10;&#10;public class ClasseService implements IClasseService {&#10;&#10;    private final IClasseDao classeDao;&#10;&#10;    public ClasseService(IClasseDao classeDao) {&#10;        this.classeDao = classeDao;&#10;    }&#10;&#10;    @Override&#10;    public void addClasse(ClasseDto classeDto) {&#10;        Classes classe = ClasseMapper.toEntity(classeDto);&#10;        classeDao.addClasse(classe);&#10;    }&#10;&#10;    @Override&#10;    public void updateClasse(ClasseDto classeDto) {&#10;        Classes classe = classeDao.getClasseById(classeDto.getId());&#10;        if (classe == null) {&#10;            throw new ClasseNotFoundException(&quot;Classe not found&quot;);&#10;        }&#10;        classe.setClassName(classeDto.getClassName());&#10;        classe.setDescription(classeDto.getDescription());&#10;        classeDao.updateClasse(classe);&#10;    }&#10;&#10;    @Override&#10;    public void deleteClasse(int id) {&#10;        Classes classe = classeDao.getClasseById(id);&#10;        if (classe == null) {&#10;            throw new ClasseNotFoundException(&quot;Classe not found&quot;);&#10;        }&#10;        classeDao.deleteClasse(id);&#10;    }&#10;&#10;    @Override&#10;    public List&lt;ClasseDto&gt; getAllClasses() {&#10;        return classeDao.getAllClasses().stream()&#10;                .map(ClasseMapper::toDto)&#10;                .collect(Collectors.toList());&#10;    }&#10;&#10;    @Override&#10;    public List&lt;ClasseDto&gt; getClassesBySector(int sectorId) {&#10;        return classeDao.getClassesBySector(sectorId).stream()&#10;                .map(ClasseMapper::toDto)&#10;                .collect(Collectors.toList());&#10;    }&#10;&#10;    @Override&#10;    public ClasseDto getClasseById(int id) {&#10;        Classes classe = classeDao.getClasseById(id);&#10;        if (classe == null) {&#10;            throw new ClasseNotFoundException(&quot;Classe not found&quot;);&#10;        }&#10;        return ClasseMapper.toDto(classe);&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.exam.metier.service;&#10;&#10;import com.exam.metier.dao.IClasseDao;&#10;import com.exam.metier.dto.ClasseDto;&#10;import com.exam.metier.entity.Classes;&#10;import com.exam.metier.exception.ClasseNotFoundException;&#10;import com.exam.metier.mapper.ClasseMapper;&#10;import java.util.List;&#10;import java.util.stream.Collectors;&#10;&#10;public class ClasseService implements IClasseService {&#10;&#10;    private final IClasseDao classeDao;&#10;&#10;    public ClasseService(IClasseDao classeDao) {&#10;        this.classeDao = classeDao;&#10;    }&#10;&#10;    @Override&#10;    public void addClasse(ClasseDto classeDto) {&#10;        Classes classe = ClasseMapper.toEntity(classeDto);&#10;        classeDao.addClasse(classe);&#10;    }&#10;&#10;    @Override&#10;    public void updateClasse(ClasseDto classeDto) {&#10;        Classes classe = classeDao.getClasseById(classeDto.getId());&#10;        if (classe == null) {&#10;            throw new ClasseNotFoundException(&quot;Classe not found&quot;);&#10;        }&#10;        classe.setClassName(classeDto.getClassName());&#10;        classe.setDescription(classeDto.getDescription());&#10;        classeDao.updateClasse(classe);&#10;    }&#10;&#10;    @Override&#10;    public void deleteClasse(int id) {&#10;        Classes classe = classeDao.getClasseById(id);&#10;        if (classe == null) {&#10;            throw new ClasseNotFoundException(&quot;Classe not found&quot;);&#10;        }&#10;        classeDao.deleteClasse(id);&#10;    }&#10;&#10;    @Override&#10;    public List&lt;ClasseDto&gt; getAllClasses() {&#10;        return classeDao.getAllClasses().stream()&#10;                .map(ClasseMapper::toDto)&#10;                .collect(Collectors.toList());&#10;    }&#10;&#10;    @Override&#10;    public List&lt;ClasseDto&gt; getClassesBySector(Long sectorId) {&#10;        return classeDao.getClassesBySector(sectorId).stream()&#10;                .map(ClasseMapper::toDto)&#10;                .collect(Collectors.toList());&#10;    }&#10;&#10;    @Override&#10;    public ClasseDto getClasseById(int id) {&#10;        Classes classe = classeDao.getClasseById(id);&#10;        if (classe == null) {&#10;            throw new ClasseNotFoundException(&quot;Classe not found&quot;);&#10;        }&#10;        return ClasseMapper.toDto(classe);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/webservices/src/main/java/com/groupeisi/webservice/service/ClasseWebServiceImpl.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/webservices/src/main/java/com/groupeisi/webservice/service/ClasseWebServiceImpl.java" />
              <option name="originalContent" value="package com.groupeisi.webservice.service;&#10;&#10;import java.util.List;&#10;&#10;import com.exam.metier.dao.ClasseDao;&#10;import com.exam.metier.dto.ClasseDto;&#10;import com.exam.metier.service.ClasseService;&#10;import com.exam.metier.service.IClasseService;&#10;import jakarta.jws.WebMethod;&#10;import jakarta.jws.WebService;&#10;import jakarta.jws.WebParam;&#10;&#10;@WebService&#10;public class ClasseWebServiceImpl implements ClasseWebService {&#10;&#10;    private final IClasseService classeService;&#10;&#10;    // No-argument constructor&#10;    public ClasseWebServiceImpl() {&#10;        // Initialize classeService with a default implementation&#10;        this.classeService = new ClasseService(new ClasseDao());&#10;        // Replace with actual implementation&#10;    }&#10;&#10;    public ClasseWebServiceImpl(IClasseService classeService) {&#10;        this.classeService = classeService;&#10;    }&#10;&#10;&#10;&#10;    @Override&#10;    @WebMethod(operationName = &quot;getClasse&quot;)&#10;    public ClasseDto get(@WebParam(name = &quot;idClasse&quot;) int idClasse) {&#10;        return classeService.getClasseById((int) idClasse);&#10;    }&#10;&#10;    @Override&#10;    @WebMethod(operationName = &quot;allClasses&quot;)&#10;    public List&lt;ClasseDto&gt; all() {&#10;        return classeService.getAllClasses();&#10;    }&#10;&#10;    //@Override&#10;    //@WebMethod(operationName = &quot;saveClasse&quot;)&#10;    //public ClasseDto save(@WebParam(name = &quot;classeDto&quot;) ClasseDto classeDto) {&#10;        //if (classeDto == null || classeDto.getClassName() == null || classeDto.getClassName().isEmpty()) {&#10;            //throw new IllegalArgumentException(&quot;Class name is required&quot;);&#10;        //}&#10;&#10;        //if (classeDto.getSectorId() == null) {&#10;            //throw new IllegalArgumentException(&quot;Sector ID is required&quot;);&#10;        //}&#10;&#10;        //classeService.addClasse(classeDto);&#10;        //classeDto.setDescription(&quot;Class saved successfully&quot;);&#10;        //return classeDto;&#10;    //}&#10;}&#10;" />
              <option name="updatedContent" value="package com.groupeisi.webservice.service;&#10;&#10;import java.util.List;&#10;&#10;import com.exam.metier.dao.ClasseDao;&#10;import com.exam.metier.dto.ClasseDto;&#10;import com.exam.metier.service.ClasseService;&#10;import com.exam.metier.service.IClasseService;&#10;import jakarta.jws.WebMethod;&#10;import jakarta.jws.WebService;&#10;import jakarta.jws.WebParam;&#10;&#10;@WebService(endpointInterface = &quot;com.groupeisi.webservice.service.ClasseWebService&quot;)&#10;public class ClasseWebServiceImpl implements ClasseWebService {&#10;&#10;    private final IClasseService classeService;&#10;&#10;    // No-argument constructor&#10;    public ClasseWebServiceImpl() {&#10;        // Initialize classeService with a default implementation&#10;        this.classeService = new ClasseService(new ClasseDao());&#10;        // Replace with actual implementation&#10;    }&#10;&#10;    public ClasseWebServiceImpl(IClasseService classeService) {&#10;        this.classeService = classeService;&#10;    }&#10;&#10;&#10;&#10;    @Override&#10;    @WebMethod(operationName = &quot;getClasse&quot;)&#10;    public ClasseDto get(@WebParam(name = &quot;id&quot;) Long idClasse) {&#10;        return classeService.getClasseById(idClasse.intValue());&#10;    }&#10;&#10;    @Override&#10;    @WebMethod(operationName = &quot;allClasses&quot;)&#10;    public List&lt;ClasseDto&gt; all() {&#10;        return classeService.getAllClasses();&#10;    }&#10;&#10;    //@Override&#10;    //@WebMethod(operationName = &quot;saveClasse&quot;)&#10;    //public ClasseDto save(@WebParam(name = &quot;classeDto&quot;) ClasseDto classeDto) {&#10;        //if (classeDto == null || classeDto.getClassName() == null || classeDto.getClassName().isEmpty()) {&#10;            //throw new IllegalArgumentException(&quot;Class name is required&quot;);&#10;        //}&#10;&#10;        //if (classeDto.getSectorId() == null) {&#10;            //throw new IllegalArgumentException(&quot;Sector ID is required&quot;);&#10;        //}&#10;&#10;        //classeService.addClasse(classeDto);&#10;        //classeDto.setDescription(&quot;Class saved successfully&quot;);&#10;        //return classeDto;&#10;    //}&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/webservices/src/main/java/com/groupeisi/webservice/service/SectorWebServiceImpl.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/webservices/src/main/java/com/groupeisi/webservice/service/SectorWebServiceImpl.java" />
              <option name="originalContent" value="package com.groupeisi.webservice.service;&#10;&#10;import java.util.List;&#10;&#10;import com.exam.metier.dao.SectorDao;&#10;import com.exam.metier.dto.SectorDto;&#10;import com.exam.metier.service.ISectorService;&#10;import com.exam.metier.service.SectorService;&#10;import jakarta.jws.WebMethod;&#10;import jakarta.jws.WebParam;&#10;import jakarta.jws.WebService;&#10;&#10;@WebService&#10;public class SectorWebServiceImpl implements SectorWebService {&#10;&#10;    private final ISectorService sectorService;&#10;&#10;    // No-argument constructor&#10;    public SectorWebServiceImpl() {&#10;        this.sectorService = new SectorService(new SectorDao());&#10;    }&#10;&#10;    public SectorWebServiceImpl(ISectorService sectorService) {&#10;        this.sectorService = sectorService;&#10;    }&#10;&#10;    @Override&#10;    @WebMethod(operationName = &quot;getSector&quot;)&#10;    public SectorDto get(@WebParam(name = &quot;id&quot;) int id) {&#10;        return sectorService.getSectorById(id);&#10;    }&#10;&#10;    @Override&#10;    @WebMethod(operationName = &quot;allSectors&quot;)&#10;    public List&lt;SectorDto&gt; all() {&#10;        System.out.println(&quot;Méthode allSectors appelée dans SectorWebServiceImpl&quot;);&#10;        List&lt;SectorDto&gt; sectors = sectorService.getAllSectors();&#10;        System.out.println(&quot;Secteurs récupérés dans allSectors : &quot; + sectors);&#10;        return sectors;&#10;    }&#10;&#10;    @Override&#10;    @WebMethod(operationName = &quot;saveSector&quot;)&#10;    public SectorDto save(@WebParam(name = &quot;sectorDto&quot;) SectorDto sectorDto) {&#10;        sectorService.addSector(sectorDto);&#10;        return sectorDto;&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.groupeisi.webservice.service;&#10;&#10;import java.util.List;&#10;&#10;import com.exam.metier.dao.SectorDao;&#10;import com.exam.metier.dto.SectorDto;&#10;import com.exam.metier.service.ISectorService;&#10;import com.exam.metier.service.SectorService;&#10;import jakarta.jws.WebMethod;&#10;import jakarta.jws.WebParam;&#10;import jakarta.jws.WebService;&#10;&#10;@WebService&#10;public class SectorWebServiceImpl implements SectorWebService {&#10;&#10;    private final ISectorService sectorService;&#10;&#10;    // No-argument constructor&#10;    public SectorWebServiceImpl() {&#10;        this.sectorService = new SectorService(new SectorDao());&#10;    }&#10;&#10;    public SectorWebServiceImpl(ISectorService sectorService) {&#10;        this.sectorService = sectorService;&#10;    }&#10;&#10;    @Override&#10;    @WebMethod(operationName = &quot;allSectors&quot;)&#10;    public List&lt;SectorDto&gt; all() {&#10;        System.out.println(&quot;Méthode allSectors appelée dans SectorWebServiceImpl&quot;);&#10;        List&lt;SectorDto&gt; sectors = sectorService.getAllSectors();&#10;        System.out.println(&quot;Secteurs récupérés dans allSectors : &quot; + sectors);&#10;        return sectors;&#10;    }&#10;&#10;    @Override&#10;    @WebMethod(operationName = &quot;saveSector&quot;)&#10;    public SectorDto save(@WebParam(name = &quot;sectorDto&quot;) SectorDto sectorDto) {&#10;        try {&#10;            sectorService.addSector(sectorDto);&#10;            System.out.println(&quot;Sector added successfully: &quot; + sectorDto);&#10;            return sectorDto;&#10;        } catch (Exception e) {&#10;            System.err.println(&quot;Error while adding sector: &quot; + e.getMessage());&#10;            throw new RuntimeException(&quot;Error while adding sector: &quot; + e.getMessage());&#10;        }&#10;    }&#10;&#10;    @Override&#10;    @WebMethod(operationName = &quot;getSector&quot;)&#10;    public SectorDto get(@WebParam(name = &quot;id&quot;) int id) {&#10;        try {&#10;            SectorDto sector = sectorService.getSectorById(id);&#10;            System.out.println(&quot;Sector retrieved successfully: &quot; + sector);&#10;            return sector;&#10;        } catch (Exception e) {&#10;            System.err.println(&quot;Error while retrieving sector: &quot; + e.getMessage());&#10;            throw new RuntimeException(&quot;Error while retrieving sector: &quot; + e.getMessage());&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>